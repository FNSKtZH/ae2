version: '3.7'
services:
  db:
    # specify container name to make it easier to run commands.
    # for example, you could run docker exec -i postgres psql -U postgres postgres < schema.sql to run an SQL file against the Postgres database
    container_name: db
    restart: always
    image: db
    build:
      context: ./db
    env_file:
      - ./.env
    networks:
      - network
    ports:
      # make the Postgres database accessible from outside the Docker container on port 5432
      - 5432:5432
    volumes:
      - db_data:/var/lib/postgresql/data
      - sik_data:/sik_data
  graphql:
    container_name: graphql
    image: graphql
    restart: always
    build:
      context: ./graphql
    networks:
      - network
    ports:
      - 5000:5000
    depends_on:
      - db
    env_file:
      - ./.env
    command:
      [
        '--connection',
        '${DATABASE_URL}',
        '--port',
        '5000',
        '--schema',
        'ae',
        '--append-plugins',
        'postgraphile-plugin-connection-filter,@graphile-contrib/pg-order-by-related',
        '--jwt-token-identifier',
        'auth.jwt_token',
        '--default-role',
        'anon',
        '--jwt-secret',
        '${JWT_SECRET}',
        '--cors',
        '--disable-query-log',
        '--enable-query-batching',
        '--retry-on-init-fail',
      ]
  #'--host',
  #'0.0.0.0',
  caddy:
    image: abiosoft/caddy:0.11.0-no-stats
    container_name: caddy
    depends_on:
      - graphql
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./caddy/Caddyfile:/etc/Caddyfile
      - caddy_certs:/root/.caddy
volumes:
  db_data:
  sik_data:
  caddy_certs:
networks:
  network:
